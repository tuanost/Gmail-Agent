"""
Module x·ª≠ l√Ω prompt cho ph√¢n t√≠ch email b·∫±ng AI.
Module n√†y cung c·∫•p c√°c ch·ª©c nƒÉng ƒë·ªÉ x·ª≠ l√Ω email d·ª±a tr√™n c√°c prompt t·ª´ ng∆∞·ªùi d√πng.
"""

import re
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# Import l·ªõp AIModelService ƒë·ªÉ s·ª≠ d·ª•ng c√°c API m√¥ h√¨nh AI
from gmail_agent.ai_models import AIModelService

# Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ email_ai - ch·ªâ gi·ªØ l·∫°i nh·ªØng h√†m th·ª±c s·ª± c·∫ßn
from gmail_agent.email_ai import extract_entities, summarize_text, extract_action_items, extract_email_body

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# C·∫•u h√¨nh m√¥ h√¨nh AI m·∫∑c ƒë·ªãnh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng Gemini n·∫øu kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh
DEFAULT_AI_PROVIDER = os.getenv("DEFAULT_AI_PROVIDER", "gemini")

def analyze_email_with_prompt(email_body, prompt):
    """
    Ph√¢n t√≠ch email d·ª±a tr√™n prompt t·ª´ ng∆∞·ªùi d√πng s·ª≠ d·ª•ng m√¥ h√¨nh AI th·ª±c t·∫ø.

    Tham s·ªë:
        email_body: N·ªôi dung email c·∫ßn ph√¢n t√≠ch
        prompt: C√¢u l·ªánh t·ª´ ng∆∞·ªùi d√πng m√¥ t·∫£ c√°ch ph√¢n t√≠ch

    Tr·∫£ v·ªÅ:
        K·∫øt qu·∫£ ph√¢n t√≠ch d·ª±a tr√™n prompt
    """
    try:
        # T·∫°o ƒë·ªëi t∆∞·ª£ng AIModelService v·ªõi nh√† cung c·∫•p m√¥ h√¨nh t·ª´ c·∫•u h√¨nh
        ai_service = AIModelService(model_provider=DEFAULT_AI_PROVIDER)

        # G·ª≠i n·ªôi dung email v√† prompt ƒë·∫øn m√¥ h√¨nh AI ƒë·ªÉ ph√¢n t√≠ch
        result = ai_service.analyze_email(email_body, prompt)

        # Ki·ªÉm tra l·ªói
        if result.get("error", False):
            print(f"L·ªói khi s·ª≠ d·ª•ng API AI: {result.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
            # Fallback: S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ph√¢n t√≠ch c·ª•c b·ªô n·∫øu g·ªçi API th·∫•t b·∫°i
            return _legacy_analyze_email(email_body, prompt)

        return result

    except Exception as e:
        print(f"L·ªói khi ph√¢n t√≠ch email v·ªõi AI: {str(e)}")
        # Fallback: S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ph√¢n t√≠ch c·ª•c b·ªô
        return _legacy_analyze_email(email_body, prompt)

# C√°c h√†m legacy ƒë·ªÉ s·ª≠ d·ª•ng khi API AI kh√¥ng kh·∫£ d·ª•ng
def _legacy_analyze_email(email_body, prompt):
    """Phi√™n b·∫£n c≈© c·ªßa h√†m ph√¢n t√≠ch email ƒë·ªÉ s·ª≠ d·ª•ng khi API AI g·∫∑p l·ªói."""
    if re.search(r't√≥m t·∫Øt|t·ªïng k·∫øt|summary', prompt.lower()):
        # Th·ª±c hi·ªán t√≥m t·∫Øt n·ªôi dung
        summary = summarize_text(email_body, num_sentences=5)

        # Tr√≠ch xu·∫•t c√°c t·ª´ kh√≥a quan tr·ªçng
        entities = extract_entities(email_body)
        keywords = []
        for name in entities['potential_names']:
            keywords.append(name)

        # Tr√≠ch xu·∫•t c√°c m·ª•c h√†nh ƒë·ªông
        action_items = extract_action_items(email_body)

        # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
        result = {
            "summary": summary,
            "important_keywords": keywords[:10],  # Gi·ªõi h·∫°n 10 t·ª´ kh√≥a
            "action_items": action_items
        }

        return result
    else:
        # M·∫∑c ƒë·ªãnh x·ª≠ l√Ω chung
        summary = summarize_text(email_body)
        return {"summary": summary}

def format_analysis_result(result):
    """
    ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.

    Tham s·ªë:
        result: K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ h√†m analyze_email_with_prompt

    Tr·∫£ v·ªÅ:
        Chu·ªói ƒë√£ ƒë·ªãnh d·∫°ng ƒë·ªÉ hi·ªÉn th·ªã
    """
    output = "===== K·∫æT QU·∫¢ PH√ÇN T√çCH EMAIL =====\n\n"

    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ chu·ªói h·ªôi tho·∫°i n·∫øu c√≥
    if "subject" in result:
        output += f"üìß CH·ª¶ ƒê·ªÄ: {result['subject']}\n"

    if "message_count" in result:
        output += f"üìä S·ªê TIN NH·∫ÆN: {result['message_count']}\n\n"

    if "summary" in result:
        output += "üìù T√ìM T·∫ÆT:\n"
        output += result["summary"]
        output += "\n\n"

    if "tom_tat" in result:
        output += "üìù T√ìM T·∫ÆT:\n"
        output += result["tom_tat"]
        output += "\n\n"

    if "important_keywords" in result and result["important_keywords"]:
        output += "üîë T·ª™ KH√ìA QUAN TR·ªåNG:\n"
        for keyword in result["important_keywords"]:
            output += f"  ‚Ä¢ {keyword}\n"
        output += "\n"

    if "tu_khoa_quan_trong" in result and result["tu_khoa_quan_trong"]:
        output += "üîë T·ª™ KH√ìA QUAN TR·ªåNG:\n"
        for keyword in result["tu_khoa_quan_trong"]:
            output += f"  ‚Ä¢ {keyword}\n"
        output += "\n"

    if "action_items" in result and result["action_items"]:
        output += "‚úÖ H√ÄNH ƒê·ªòNG C·∫¶N TH·ª∞C HI·ªÜN:\n"
        for action in result["action_items"]:
            output += f"  ‚Ä¢ {action}\n"
        output += "\n"

    if "hanh_dong" in result and result["hanh_dong"]:
        output += "‚úÖ H√ÄNH ƒê·ªòNG C·∫¶N TH·ª∞C HI·ªÜN:\n"
        for action in result["hanh_dong"]:
            output += f"  ‚Ä¢ {action}\n"
        output += "\n"

    if "phan_tich_them" in result and result["phan_tich_them"]:
        output += "üìå PH√ÇN T√çCH TH√äM:\n"
        if isinstance(result["phan_tich_them"], str):
            output += result["phan_tich_them"] + "\n\n"
        elif isinstance(result["phan_tich_them"], list):
            for item in result["phan_tich_them"]:
                output += f"  ‚Ä¢ {item}\n"
            output += "\n"
        elif isinstance(result["phan_tich_them"], dict):
            for key, value in result["phan_tich_them"].items():
                output += f"  ‚Ä¢ {key}: {value}\n"
            output += "\n"

    return output

def save_analysis_result(result, file_name):
    """
    L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o m·ªôt file JSON.

    Tham s·ªë:
        result: K·∫øt qu·∫£ ph√¢n t√≠ch
        file_name: T√™n file ƒë·ªÉ l∆∞u k·∫øt qu·∫£
    """
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    os.makedirs("email_analysis_results", exist_ok=True)

    file_path = os.path.join("email_analysis_results", file_name)

    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

    return file_path

def highlight_keywords_in_text(text, keywords):
    """
    L√†m n·ªïi b·∫≠t t·ª´ kh√≥a trong vƒÉn b·∫£n.

    Tham s·ªë:
        text: VƒÉn b·∫£n c·∫ßn l√†m n·ªïi b·∫≠t
        keywords: Danh s√°ch c√°c t·ª´ kh√≥a c·∫ßn l√†m n·ªïi b·∫≠t

    Tr·∫£ v·ªÅ:
        VƒÉn b·∫£n v·ªõi c√°c t·ª´ kh√≥a ƒë∆∞·ª£c l√†m n·ªïi b·∫≠t
    """
    highlighted_text = text

    for keyword in keywords:
        if len(keyword.strip()) > 2:  # B·ªè qua c√°c t·ª´ kh√≥a qu√° ng·∫Øn
            pattern = re.compile(re.escape(keyword), re.IGNORECASE)
            highlighted_text = pattern.sub(f"\033[1m\033[93m{keyword}\033[0m", highlighted_text)

    return highlighted_text
